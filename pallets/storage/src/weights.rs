// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_storage
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-01-05, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// ./target/release/deer-node
// benchmark
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet-storage
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./pallets/storage/src/weights.rs
// --template=./scripts/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_storage.
pub trait WeightInfo {
	fn set_enclave() -> Weight;
	fn stash() -> Weight;
	fn withdraw() -> Weight;
	fn register() -> Weight;
	fn report(x: u32, y: u32, ) -> Weight;
	fn store() -> Weight;
	fn force_delete() -> Weight;
	fn session_end() -> Weight;
}

/// Weights for pallet_storage using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: FileStorage Enclaves (r:1 w:1)
	fn set_enclave() -> Weight {
		(17_175_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: FileStorage Nodes (r:1 w:1)
	fn stash() -> Weight {
		(43_035_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: FileStorage Nodes (r:1 w:1)
	fn withdraw() -> Weight {
		(45_617_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: FileStorage Registers (r:1 w:1)
	// Storage: FileStorage Nodes (r:1 w:1)
	// Storage: FileStorage Enclaves (r:1 w:0)
	fn register() -> Weight {
		(4_103_095_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: FileStorage Nodes (r:1 w:1)
	// Storage: FileStorage Registers (r:1 w:0)
	// Storage: FileStorage Enclaves (r:1 w:0)
	// Storage: FileStorage Session (r:1 w:0)
	// Storage: FileStorage Files (r:15 w:9)
	// Storage: FileStorage Summarys (r:1 w:1)
	// Storage: FileStorage StoragePotReserved (r:1 w:1)
	fn report(x: u32, y: u32, ) -> Weight {
		(2_688_784_000 as Weight)
			// Standard Error: 134_000
			.saturating_add((13_954_000 as Weight).saturating_mul(x as Weight))
			// Standard Error: 134_000
			.saturating_add((8_559_000 as Weight).saturating_mul(y as Weight))
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(x as Weight)))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(y as Weight)))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(x as Weight)))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(y as Weight)))
	}
	// Storage: FileStorage Files (r:1 w:1)
	fn store() -> Weight {
		(44_508_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: FileStorage Files (r:1 w:1)
	// Storage: FileStorage StoragePotReserved (r:1 w:1)
	fn force_delete() -> Weight {
		(25_098_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: FileStorage Session (r:1 w:1)
	// Storage: FileStorage Summarys (r:2 w:2)
	// Storage: FileStorage StoragePotReserved (r:1 w:1)
	fn session_end() -> Weight {
		(34_661_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: FileStorage Enclaves (r:1 w:1)
	fn set_enclave() -> Weight {
		(17_175_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: FileStorage Nodes (r:1 w:1)
	fn stash() -> Weight {
		(43_035_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: FileStorage Nodes (r:1 w:1)
	fn withdraw() -> Weight {
		(45_617_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: FileStorage Registers (r:1 w:1)
	// Storage: FileStorage Nodes (r:1 w:1)
	// Storage: FileStorage Enclaves (r:1 w:0)
	fn register() -> Weight {
		(4_103_095_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: FileStorage Nodes (r:1 w:1)
	// Storage: FileStorage Registers (r:1 w:0)
	// Storage: FileStorage Enclaves (r:1 w:0)
	// Storage: FileStorage Session (r:1 w:0)
	// Storage: FileStorage Files (r:15 w:9)
	// Storage: FileStorage Summarys (r:1 w:1)
	// Storage: FileStorage StoragePotReserved (r:1 w:1)
	fn report(x: u32, y: u32, ) -> Weight {
		(2_688_784_000 as Weight)
			// Standard Error: 134_000
			.saturating_add((13_954_000 as Weight).saturating_mul(x as Weight))
			// Standard Error: 134_000
			.saturating_add((8_559_000 as Weight).saturating_mul(y as Weight))
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(x as Weight)))
			.saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(y as Weight)))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(x as Weight)))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(y as Weight)))
	}
	// Storage: FileStorage Files (r:1 w:1)
	fn store() -> Weight {
		(44_508_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: FileStorage Files (r:1 w:1)
	// Storage: FileStorage StoragePotReserved (r:1 w:1)
	fn force_delete() -> Weight {
		(25_098_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: FileStorage Session (r:1 w:1)
	// Storage: FileStorage Summarys (r:2 w:2)
	// Storage: FileStorage StoragePotReserved (r:1 w:1)
	fn session_end() -> Weight {
		(34_661_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
}
